package com.linktree.aibsc.service;

import com.linktree.aibsc.domain.${InstanceName}.${DomainName};
import com.linktree.aibsc.domain.${InstanceName}.${DomainName}Repository;
import com.linktree.aibsc.excel.ExcelReader;
import com.linktree.aibsc.web.dto.${InstanceName}.${DomainName}ResponseDto;
import com.linktree.aibsc.web.dto.${InstanceName}.${DomainName}SaveDto;
import com.linktree.aibsc.web.dto.${InstanceName}.${DomainName}SaveExcelDto;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Transactional(readOnly = true)
@Service
public class ${DomainName}Service {

    private final ${DomainName}Repository ${InstanceName}Repository;

    private final ${DomainName}Mapper ${InstanceName}Mapper;

    private final MessageSource ms;

    public ${DomainName}Service(${DomainName}Repository ${InstanceName}Repository, MessageSource ms) {
        this.${InstanceName}Repository = ${InstanceName}Repository;
        this.${InstanceName}Mapper = ${InstanceName}Mapper;
        this.ms = ms;
    }

    @Transactional
    public ResultStatus<String> save${DomainName}(${DomainName}SaveDto ${InstanceName}SaveDto) {

       ${DomainName} ${InstanceName} = ${InstanceName}Repository.save(${DomainName}.builder()
 
               .build());

         ObjectMapper mapper = new ObjectMapper();
         Map<String, Object> data = new HashMap<String, Object>();
         data.put("data", ${InstanceName});

         String jsonList = null;
         try {
             jsonList = mapper.writeValueAsString(data);
         } catch (JsonProcessingException e) {

         }
         ResultStatus<String> resultStatus = ResultStatus.<String>builder()
                 .status(StatusEnum.SUCCESS)
                 .message("저장되었습니다.")
                 .resultData(jsonList).build();

         return resultStatus;
    }

    @Transactional
    public ResultStatus<String> modify${DomainName}(${DomainName}SaveDto ${InstanceName}SaveDto) {
        ${DomainName} ${InstanceName} = ${InstanceName}Repository.findById(${InstanceName}SaveDto.getId())
                .orElseThrow(() -> new IllegalArgumentException("등록된 정보가 없습니다."));

        //저장할 정보 입력

        ${DomainName} saved${InstanceName} = ${InstanceName}Repository.save(${InstanceName});

        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("data", saved${InstanceName});

        String jsonList = null;
        try {
            jsonList = mapper.writeValueAsString(data);
        } catch (JsonProcessingException e) {

        }
        ResultStatus<String> resultStatus = ResultStatus.<String>builder()
                .status(StatusEnum.SUCCESS)
                .message("저장되었습니다.")
                .resultData(jsonList).build();
        return resultStatus;
    }

    @Transactional
    public ResultStatus<String> delete${DomainName}(Long id) {
        ${DomainName} ${InstanceName} = ${InstanceName}Repository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("등록된 정보가 없습니다."));
        ${InstanceName}Repository.delete(${InstanceName});

        ResultStatus<String> resultStatus = ResultStatus.<String>builder()
                .status(StatusEnum.SUCCESS)
                .message("삭제되었습니다.").build();
        return resultStatus;
    }

    @Transactional
    public ResultStatus<String> get${DomainName}SearchList(${DomainName}SearchDto ${InstanceName}SearchDto) {

        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> data = new HashMap<String, Object>();

        data.put("${InstanceName}List", ${InstanceName}Mapper.get${DomainName}SearchList(${InstanceName}SearchDto));

        String jsonList = null;
        try {
            jsonList = mapper.writeValueAsString(data);
        } catch (JsonProcessingException e) {

        }
        ResultStatus<String> resultStatus = ResultStatus.<String>builder()
                .status(StatusEnum.SUCCESS)
                .resultData(jsonList).build();
        return resultStatus;
    }

    @Transactional
    public ResultStatus<String> detail${DomainName}(Long id) {
        ${DomainName} ${InstanceName} = ${InstanceName}Repository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("등록된 정보가 없습니다."));

        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> data = new HashMap<String, Object>();
        data.put("data", ${InstanceName});

        String jsonList = null;
        try {
            jsonList = mapper.writeValueAsString(data);
        } catch (JsonProcessingException e) {

        }
        ResultStatus<String> resultStatus = ResultStatus.<String>builder()
                .status(StatusEnum.SUCCESS)
                .resultData(jsonList).build();
        return resultStatus;
    }
}